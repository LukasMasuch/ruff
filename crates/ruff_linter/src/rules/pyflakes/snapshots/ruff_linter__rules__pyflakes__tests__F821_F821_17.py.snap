---
source: crates/ruff_linter/src/rules/pyflakes/mod.rs
---
error[F821]: F821_17.py:16:12: Undefined name `DoesNotExist`

   |
14 | # Types used in aliased assignment must exist
15 | 
16 | type Foo = DoesNotExist  # F821: Undefined name `DoesNotExist`
   |            ^^^^^^^^^^^^
17 | type Foo = list[DoesNotExist]  # F821: Undefined name `DoesNotExist`
   |
error[F821]: F821_17.py:17:17: Undefined name `DoesNotExist`

   |
16 | type Foo = DoesNotExist  # F821: Undefined name `DoesNotExist`
17 | type Foo = list[DoesNotExist]  # F821: Undefined name `DoesNotExist`
   |                 ^^^^^^^^^^^^
18 | 
19 | # Type parameters do not escape alias scopes
   |
error[F821]: F821_17.py:22:1: Undefined name `T`

   |
21 | type Foo[T] = T
22 | T  # F821: Undefined name `T` - not accessible afterward alias scope
   | ^
23 | 
24 | # Type parameters in functions
   |
error[F821]: F821_17.py:39:17: Undefined name `T`

   |
37 | from some_library import some_decorator
38 | 
39 | @some_decorator(T)  # F821: Undefined name `T` - not accessible in decorators
   |                 ^
40 | 
41 | def foo[T](t: T) -> None: ...
   |
error[F821]: F821_17.py:42:1: Undefined name `T`

   |
41 | def foo[T](t: T) -> None: ...
42 | T  # F821: Undefined name `T` - not accessible afterward function scope
   | ^
   |
error[F821]: F821_17.py:64:17: Undefined name `T`

   |
63 | from some_library import some_decorator
64 | @some_decorator(T)  # F821: Undefined name `T` - not accessible in decorators
   |                 ^
65 | 
66 | class Foo[T](list[T]): ...
   |
error[F821]: F821_17.py:67:1: Undefined name `T`

   |
66 | class Foo[T](list[T]): ...
67 | T  # F821: Undefined name `T` - not accessible after class scope
   | ^
68 | 
69 | # Types specified in bounds should exist
   |
error[F821]: F821_17.py:71:13: Undefined name `DoesNotExist`

   |
69 | # Types specified in bounds should exist
70 | 
71 | type Foo[T: DoesNotExist] = T  # F821: Undefined name `DoesNotExist`
   |             ^^^^^^^^^^^^
72 | def foo[T: DoesNotExist](t: T) -> T: return t  # F821: Undefined name `DoesNotExist`
73 | class Foo[T: DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
   |
error[F821]: F821_17.py:72:12: Undefined name `DoesNotExist`

   |
71 | type Foo[T: DoesNotExist] = T  # F821: Undefined name `DoesNotExist`
72 | def foo[T: DoesNotExist](t: T) -> T: return t  # F821: Undefined name `DoesNotExist`
   |            ^^^^^^^^^^^^
73 | class Foo[T: DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
   |
error[F821]: F821_17.py:73:14: Undefined name `DoesNotExist`

   |
71 | type Foo[T: DoesNotExist] = T  # F821: Undefined name `DoesNotExist`
72 | def foo[T: DoesNotExist](t: T) -> T: return t  # F821: Undefined name `DoesNotExist`
73 | class Foo[T: DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
   |              ^^^^^^^^^^^^
74 | 
75 | type Foo[T: (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |
error[F821]: F821_17.py:75:14: Undefined name `DoesNotExist1`

   |
73 | class Foo[T: DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
74 | 
75 | type Foo[T: (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |              ^^^^^^^^^^^^^
76 | def foo[T: (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
77 | class Foo[T: (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |
error[F821]: F821_17.py:75:29: Undefined name `DoesNotExist2`

   |
73 | class Foo[T: DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
74 | 
75 | type Foo[T: (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |                             ^^^^^^^^^^^^^
76 | def foo[T: (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
77 | class Foo[T: (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |
error[F821]: F821_17.py:76:13: Undefined name `DoesNotExist1`

   |
75 | type Foo[T: (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
76 | def foo[T: (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |             ^^^^^^^^^^^^^
77 | class Foo[T: (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |
error[F821]: F821_17.py:76:28: Undefined name `DoesNotExist2`

   |
75 | type Foo[T: (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
76 | def foo[T: (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |                            ^^^^^^^^^^^^^
77 | class Foo[T: (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |
error[F821]: F821_17.py:77:15: Undefined name `DoesNotExist1`

   |
75 | type Foo[T: (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
76 | def foo[T: (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
77 | class Foo[T: (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |               ^^^^^^^^^^^^^
78 | 
79 | # Same in defaults
   |
error[F821]: F821_17.py:77:30: Undefined name `DoesNotExist2`

   |
75 | type Foo[T: (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
76 | def foo[T: (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
77 | class Foo[T: (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |                              ^^^^^^^^^^^^^
78 | 
79 | # Same in defaults
   |
error[F821]: F821_17.py:81:14: Undefined name `DoesNotExist`

   |
79 | # Same in defaults
80 | 
81 | type Foo[T = DoesNotExist] = T  # F821: Undefined name `DoesNotExist`
   |              ^^^^^^^^^^^^
82 | def foo[T = DoesNotExist](t: T) -> T: return t  # F821: Undefined name `DoesNotExist`
83 | class Foo[T = DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
   |
error[F821]: F821_17.py:82:13: Undefined name `DoesNotExist`

   |
81 | type Foo[T = DoesNotExist] = T  # F821: Undefined name `DoesNotExist`
82 | def foo[T = DoesNotExist](t: T) -> T: return t  # F821: Undefined name `DoesNotExist`
   |             ^^^^^^^^^^^^
83 | class Foo[T = DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
   |
error[F821]: F821_17.py:83:15: Undefined name `DoesNotExist`

   |
81 | type Foo[T = DoesNotExist] = T  # F821: Undefined name `DoesNotExist`
82 | def foo[T = DoesNotExist](t: T) -> T: return t  # F821: Undefined name `DoesNotExist`
83 | class Foo[T = DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
   |               ^^^^^^^^^^^^
84 | 
85 | type Foo[T = (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |
error[F821]: F821_17.py:85:15: Undefined name `DoesNotExist1`

   |
83 | class Foo[T = DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
84 | 
85 | type Foo[T = (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |               ^^^^^^^^^^^^^
86 | def foo[T = (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExi...
87 | class Foo[T = (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |
error[F821]: F821_17.py:85:30: Undefined name `DoesNotExist2`

   |
83 | class Foo[T = DoesNotExist](list[T]): ...  # F821: Undefined name `DoesNotExist`
84 | 
85 | type Foo[T = (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |                              ^^^^^^^^^^^^^
86 | def foo[T = (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExi...
87 | class Foo[T = (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |
error[F821]: F821_17.py:86:14: Undefined name `DoesNotExist1`

   |
85 | type Foo[T = (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
86 | def foo[T = (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExi...
   |              ^^^^^^^^^^^^^
87 | class Foo[T = (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |
error[F821]: F821_17.py:86:29: Undefined name `DoesNotExist2`

   |
85 | type Foo[T = (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
86 | def foo[T = (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExi...
   |                             ^^^^^^^^^^^^^
87 | class Foo[T = (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |
error[F821]: F821_17.py:87:16: Undefined name `DoesNotExist1`

   |
85 | type Foo[T = (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
86 | def foo[T = (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExi...
87 | class Foo[T = (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |                ^^^^^^^^^^^^^
88 | 
89 | # Type parameters in nested classes
   |
error[F821]: F821_17.py:87:31: Undefined name `DoesNotExist2`

   |
85 | type Foo[T = (DoesNotExist1, DoesNotExist2)] = T  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
86 | def foo[T = (DoesNotExist1, DoesNotExist2)](t: T) -> T: return t  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExi...
87 | class Foo[T = (DoesNotExist1, DoesNotExist2)](list[T]): ...  # F821: Undefined name `DoesNotExist1`, Undefined name `DoesNotExist2`
   |                               ^^^^^^^^^^^^^
88 | 
89 | # Type parameters in nested classes
   |
error[F821]: F821_17.py:102:52: Undefined name `t`

    |
100 |             return x
101 | 
102 |         def cannot_access_parent_variable(self, x: t) -> t:  # F821: Undefined name `T`
    |                                                    ^
103 |                 t # F821: Undefined name `t`
104 |                 return x
    |
error[F821]: F821_17.py:102:58: Undefined name `t`

    |
100 |             return x
101 | 
102 |         def cannot_access_parent_variable(self, x: t) -> t:  # F821: Undefined name `T`
    |                                                          ^
103 |                 t # F821: Undefined name `t`
104 |                 return x
    |
error[F821]: F821_17.py:103:17: Undefined name `t`

    |
102 |         def cannot_access_parent_variable(self, x: t) -> t:  # F821: Undefined name `T`
103 |                 t # F821: Undefined name `t`
    |                 ^
104 |                 return x
    |
