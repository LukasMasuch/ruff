---
source: crates/ruff_linter/src/rules/numpy/mod.rs
---
error[NPY201]: NPY201.py:4:5: [*] `np.add_docstring` will be removed in NumPy 2.0. Use `numpy.lib.add_docstring` instead.

  |
2 |     import numpy as np
3 | 
4 |     np.add_docstring
  |     ^^^^^^^^^^^^^^^^
5 | 
6 |     np.add_newdoc
  |
  = help: Replace with `numpy.lib.add_docstring`
ℹ Safe fix
  1 |+from numpy.lib import add_docstring
1 2 | def func():
2 3 |     import numpy as np
3 4 | 
4   |-    np.add_docstring
  5 |+    add_docstring
5 6 | 
6 7 |     np.add_newdoc
7 8 | 

error[NPY201]: NPY201.py:6:5: [*] `np.add_newdoc` will be removed in NumPy 2.0. Use `numpy.lib.add_newdoc` instead.

  |
4 |     np.add_docstring
5 | 
6 |     np.add_newdoc
  |     ^^^^^^^^^^^^^
7 | 
8 |     np.add_newdoc_ufunc
  |
  = help: Replace with `numpy.lib.add_newdoc`
ℹ Safe fix
  1 |+from numpy.lib import add_newdoc
1 2 | def func():
2 3 |     import numpy as np
3 4 | 
4 5 |     np.add_docstring
5 6 | 
6   |-    np.add_newdoc
  7 |+    add_newdoc
7 8 | 
8 9 |     np.add_newdoc_ufunc
9 10 | 

error[NPY201]: NPY201.py:8:5: `np.add_newdoc_ufunc` will be removed in NumPy 2.0. `add_newdoc_ufunc` is an internal function.

   |
 6 |     np.add_newdoc
 7 | 
 8 |     np.add_newdoc_ufunc
   |     ^^^^^^^^^^^^^^^^^^^
 9 | 
10 |     np.asfarray([1,2,3])
   |
error[NPY201]: NPY201.py:10:5: `np.asfarray` will be removed in NumPy 2.0. Use `np.asarray` with a `float` dtype instead.

   |
 8 |     np.add_newdoc_ufunc
 9 | 
10 |     np.asfarray([1,2,3])
   |     ^^^^^^^^^^^
11 | 
12 |     np.byte_bounds(np.array([1,2,3]))
   |
error[NPY201]: NPY201.py:12:5: [*] `np.byte_bounds` will be removed in NumPy 2.0. Use `numpy.lib.array_utils.byte_bounds` on NumPy 2.0, or ignore this warning on earlier versions.

   |
10 |     np.asfarray([1,2,3])
11 | 
12 |     np.byte_bounds(np.array([1,2,3]))
   |     ^^^^^^^^^^^^^^
13 | 
14 |     np.cast
   |
   = help: Replace with `numpy.lib.array_utils.byte_bounds` (requires NumPy 2.0 or greater)
ℹ Unsafe fix
   1  |+from numpy.lib.array_utils import byte_bounds
1  2  | def func():
2  3  |     import numpy as np
3  4  | 
--------------------------------------------------------------------------------
9  10 | 
10 11 |     np.asfarray([1,2,3])
11 12 | 
12    |-    np.byte_bounds(np.array([1,2,3]))
   13 |+    byte_bounds(np.array([1,2,3]))
13 14 | 
14 15 |     np.cast
15 16 | 

error[NPY201]: NPY201.py:14:5: `np.cast` will be removed in NumPy 2.0. Use `np.asarray(arr, dtype=dtype)` instead.

   |
12 |     np.byte_bounds(np.array([1,2,3]))
13 | 
14 |     np.cast
   |     ^^^^^^^
15 | 
16 |     np.cfloat(12+34j)
   |
error[NPY201]: NPY201.py:16:5: [*] `np.cfloat` will be removed in NumPy 2.0. Use `numpy.complex128` instead.

   |
14 |     np.cast
15 | 
16 |     np.cfloat(12+34j)
   |     ^^^^^^^^^
17 | 
18 |     np.clongfloat(12+34j)
   |
   = help: Replace with `numpy.complex128`
ℹ Safe fix
13 13 | 
14 14 |     np.cast
15 15 | 
16    |-    np.cfloat(12+34j)
   16 |+    np.complex128(12+34j)
17 17 | 
18 18 |     np.clongfloat(12+34j)
19 19 | 

error[NPY201]: NPY201.py:18:5: [*] `np.clongfloat` will be removed in NumPy 2.0. Use `numpy.clongdouble` instead.

   |
16 |     np.cfloat(12+34j)
17 | 
18 |     np.clongfloat(12+34j)
   |     ^^^^^^^^^^^^^
19 | 
20 |     np.compat
   |
   = help: Replace with `numpy.clongdouble`
ℹ Safe fix
15 15 | 
16 16 |     np.cfloat(12+34j)
17 17 | 
18    |-    np.clongfloat(12+34j)
   18 |+    np.clongdouble(12+34j)
19 19 | 
20 20 |     np.compat
21 21 | 

error[NPY201]: NPY201.py:20:5: `np.compat` will be removed in NumPy 2.0. Python 2 is no longer supported.

   |
18 |     np.clongfloat(12+34j)
19 | 
20 |     np.compat
   |     ^^^^^^^^^
21 | 
22 |     np.complex_(12+34j)
   |
error[NPY201]: NPY201.py:22:5: [*] `np.complex_` will be removed in NumPy 2.0. Use `numpy.complex128` instead.

   |
20 |     np.compat
21 | 
22 |     np.complex_(12+34j)
   |     ^^^^^^^^^^^
23 | 
24 |     np.DataSource
   |
   = help: Replace with `numpy.complex128`
ℹ Safe fix
19 19 | 
20 20 |     np.compat
21 21 | 
22    |-    np.complex_(12+34j)
   22 |+    np.complex128(12+34j)
23 23 | 
24 24 |     np.DataSource
25 25 | 

error[NPY201]: NPY201.py:24:5: [*] `np.DataSource` will be removed in NumPy 2.0. Use `numpy.lib.npyio.DataSource` instead.

   |
22 |     np.complex_(12+34j)
23 | 
24 |     np.DataSource
   |     ^^^^^^^^^^^^^
25 | 
26 |     np.deprecate
   |
   = help: Replace with `numpy.lib.npyio.DataSource`
ℹ Safe fix
   1  |+from numpy.lib.npyio import DataSource
1  2  | def func():
2  3  |     import numpy as np
3  4  | 
--------------------------------------------------------------------------------
21 22 | 
22 23 |     np.complex_(12+34j)
23 24 | 
24    |-    np.DataSource
   25 |+    DataSource
25 26 | 
26 27 |     np.deprecate
27 28 | 

error[NPY201]: NPY201.py:26:5: `np.deprecate` will be removed in NumPy 2.0. Emit `DeprecationWarning` with `warnings.warn` directly, or use `typing.deprecated`.

   |
24 |     np.DataSource
25 | 
26 |     np.deprecate
   |     ^^^^^^^^^^^^
27 | 
28 |     np.deprecate_with_doc
   |
error[NPY201]: NPY201.py:28:5: `np.deprecate_with_doc` will be removed in NumPy 2.0. Emit `DeprecationWarning` with `warnings.warn` directly, or use `typing.deprecated`.

   |
26 |     np.deprecate
27 | 
28 |     np.deprecate_with_doc
   |     ^^^^^^^^^^^^^^^^^^^^^
29 | 
30 |     np.disp(10)
   |
error[NPY201]: NPY201.py:30:5: `np.disp` will be removed in NumPy 2.0. Use a dedicated print function instead.

   |
28 |     np.deprecate_with_doc
29 | 
30 |     np.disp(10)
   |     ^^^^^^^
31 | 
32 |     np.fastCopyAndTranspose
   |
error[NPY201]: NPY201.py:32:5: `np.fastCopyAndTranspose` will be removed in NumPy 2.0. Use `arr.T.copy()` instead.

   |
30 |     np.disp(10)
31 | 
32 |     np.fastCopyAndTranspose
   |     ^^^^^^^^^^^^^^^^^^^^^^^
33 | 
34 |     np.find_common_type
   |
error[NPY201]: NPY201.py:34:5: `np.find_common_type` will be removed in NumPy 2.0. Use `numpy.promote_types` or `numpy.result_type` instead. To achieve semantics for the `scalar_types` argument, use `numpy.result_type` and pass the Python values `0`, `0.0`, or `0j`.

   |
32 |     np.fastCopyAndTranspose
33 | 
34 |     np.find_common_type
   |     ^^^^^^^^^^^^^^^^^^^
35 | 
36 |     np.get_array_wrap
   |
error[NPY201]: NPY201.py:36:5: `np.get_array_wrap` will be removed without replacement in NumPy 2.0

   |
34 |     np.find_common_type
35 | 
36 |     np.get_array_wrap
   |     ^^^^^^^^^^^^^^^^^
37 | 
38 |     np.float_
   |
error[NPY201]: NPY201.py:38:5: [*] `np.float_` will be removed in NumPy 2.0. Use `numpy.float64` instead.

   |
36 |     np.get_array_wrap
37 | 
38 |     np.float_
   |     ^^^^^^^^^
39 | 
40 |     np.geterrobj
   |
   = help: Replace with `numpy.float64`
ℹ Safe fix
35 35 | 
36 36 |     np.get_array_wrap
37 37 | 
38    |-    np.float_
   38 |+    np.float64
39 39 | 
40 40 |     np.geterrobj
41 41 | 

error[NPY201]: NPY201.py:40:5: `np.geterrobj` will be removed in NumPy 2.0. Use the `np.errstate` context manager instead.

   |
38 |     np.float_
39 | 
40 |     np.geterrobj
   |     ^^^^^^^^^^^^
41 | 
42 |     np.Inf
   |
error[NPY201]: NPY201.py:42:5: [*] `np.Inf` will be removed in NumPy 2.0. Use `numpy.inf` instead.

   |
40 |     np.geterrobj
41 | 
42 |     np.Inf
   |     ^^^^^^
43 | 
44 |     np.Infinity
   |
   = help: Replace with `numpy.inf`
ℹ Safe fix
39 39 | 
40 40 |     np.geterrobj
41 41 | 
42    |-    np.Inf
   42 |+    np.inf
43 43 | 
44 44 |     np.Infinity
45 45 | 

error[NPY201]: NPY201.py:44:5: [*] `np.Infinity` will be removed in NumPy 2.0. Use `numpy.inf` instead.

   |
42 |     np.Inf
43 | 
44 |     np.Infinity
   |     ^^^^^^^^^^^
45 | 
46 |     np.infty
   |
   = help: Replace with `numpy.inf`
ℹ Safe fix
41 41 | 
42 42 |     np.Inf
43 43 | 
44    |-    np.Infinity
   44 |+    np.inf
45 45 | 
46 46 |     np.infty
47 47 | 

error[NPY201]: NPY201.py:46:5: [*] `np.infty` will be removed in NumPy 2.0. Use `numpy.inf` instead.

   |
44 |     np.Infinity
45 | 
46 |     np.infty
   |     ^^^^^^^^
47 | 
48 |     np.issctype
   |
   = help: Replace with `numpy.inf`
ℹ Safe fix
43 43 | 
44 44 |     np.Infinity
45 45 | 
46    |-    np.infty
   46 |+    np.inf
47 47 | 
48 48 |     np.issctype
49 49 | 

error[NPY201]: NPY201.py:48:5: `np.issctype` will be removed without replacement in NumPy 2.0

   |
46 |     np.infty
47 | 
48 |     np.issctype
   |     ^^^^^^^^^^^
49 | 
50 |     np.issubclass_(np.int32, np.integer)
   |
error[NPY201]: NPY201.py:50:5: [*] `np.issubclass_` will be removed in NumPy 2.0. Use `issubclass` instead.

   |
48 |     np.issctype
49 | 
50 |     np.issubclass_(np.int32, np.integer)
   |     ^^^^^^^^^^^^^^
51 | 
52 |     np.issubsctype
   |
   = help: Replace with `issubclass`
ℹ Safe fix
47 47 | 
48 48 |     np.issctype
49 49 | 
50    |-    np.issubclass_(np.int32, np.integer)
   50 |+    issubclass(np.int32, np.integer)
51 51 | 
52 52 |     np.issubsctype
53 53 | 

error[NPY201]: NPY201.py:52:5: [*] `np.issubsctype` will be removed in NumPy 2.0. Use `numpy.issubdtype` instead.

   |
50 |     np.issubclass_(np.int32, np.integer)
51 | 
52 |     np.issubsctype
   |     ^^^^^^^^^^^^^^
53 | 
54 |     np.mat
   |
   = help: Replace with `numpy.issubdtype`
ℹ Safe fix
49 49 | 
50 50 |     np.issubclass_(np.int32, np.integer)
51 51 | 
52    |-    np.issubsctype
   52 |+    np.issubdtype
53 53 | 
54 54 |     np.mat
55 55 | 

error[NPY201]: NPY201.py:54:5: [*] `np.mat` will be removed in NumPy 2.0. Use `numpy.asmatrix` instead.

   |
52 |     np.issubsctype
53 | 
54 |     np.mat
   |     ^^^^^^
55 | 
56 |     np.maximum_sctype
   |
   = help: Replace with `numpy.asmatrix`
ℹ Safe fix
51 51 | 
52 52 |     np.issubsctype
53 53 | 
54    |-    np.mat
   54 |+    np.asmatrix
55 55 | 
56 56 |     np.maximum_sctype
57 57 | 

error[NPY201]: NPY201.py:56:5: `np.maximum_sctype` will be removed without replacement in NumPy 2.0

   |
54 |     np.mat
55 | 
56 |     np.maximum_sctype
   |     ^^^^^^^^^^^^^^^^^
57 | 
58 |     np.NaN
   |
error[NPY201]: NPY201.py:58:5: [*] `np.NaN` will be removed in NumPy 2.0. Use `numpy.nan` instead.

   |
56 |     np.maximum_sctype
57 | 
58 |     np.NaN
   |     ^^^^^^
59 | 
60 |     np.nbytes[np.int64]
   |
   = help: Replace with `numpy.nan`
ℹ Safe fix
55 55 | 
56 56 |     np.maximum_sctype
57 57 | 
58    |-    np.NaN
   58 |+    np.nan
59 59 | 
60 60 |     np.nbytes[np.int64]
61 61 | 

error[NPY201]: NPY201.py:60:5: `np.nbytes` will be removed in NumPy 2.0. Use `np.dtype(<dtype>).itemsize` instead.

   |
58 |     np.NaN
59 | 
60 |     np.nbytes[np.int64]
   |     ^^^^^^^^^
61 | 
62 |     np.NINF
   |
error[NPY201]: NPY201.py:62:5: [*] `np.NINF` will be removed in NumPy 2.0. Use `-np.inf` instead.

   |
60 |     np.nbytes[np.int64]
61 | 
62 |     np.NINF
   |     ^^^^^^^
63 | 
64 |     np.NZERO
   |
   = help: Replace with `-np.inf`
ℹ Safe fix
59 59 | 
60 60 |     np.nbytes[np.int64]
61 61 | 
62    |-    np.NINF
   62 |+    -np.inf
63 63 | 
64 64 |     np.NZERO
65 65 | 

error[NPY201]: NPY201.py:64:5: [*] `np.NZERO` will be removed in NumPy 2.0. Use `-0.0` instead.

   |
62 |     np.NINF
63 | 
64 |     np.NZERO
   |     ^^^^^^^^
65 | 
66 |     np.longcomplex(12+34j)
   |
   = help: Replace with `-0.0`
ℹ Safe fix
61 61 | 
62 62 |     np.NINF
63 63 | 
64    |-    np.NZERO
   64 |+    -0.0
65 65 | 
66 66 |     np.longcomplex(12+34j)
67 67 | 

error[NPY201]: NPY201.py:66:5: [*] `np.longcomplex` will be removed in NumPy 2.0. Use `numpy.clongdouble` instead.

   |
64 |     np.NZERO
65 | 
66 |     np.longcomplex(12+34j)
   |     ^^^^^^^^^^^^^^
67 | 
68 |     np.longfloat(12+34j)
   |
   = help: Replace with `numpy.clongdouble`
ℹ Safe fix
63 63 | 
64 64 |     np.NZERO
65 65 | 
66    |-    np.longcomplex(12+34j)
   66 |+    np.clongdouble(12+34j)
67 67 | 
68 68 |     np.longfloat(12+34j)
69 69 | 

error[NPY201]: NPY201.py:68:5: [*] `np.longfloat` will be removed in NumPy 2.0. Use `numpy.longdouble` instead.

   |
66 |     np.longcomplex(12+34j)
67 | 
68 |     np.longfloat(12+34j)
   |     ^^^^^^^^^^^^
69 | 
70 |     np.lookfor
   |
   = help: Replace with `numpy.longdouble`
ℹ Safe fix
65 65 | 
66 66 |     np.longcomplex(12+34j)
67 67 | 
68    |-    np.longfloat(12+34j)
   68 |+    np.longdouble(12+34j)
69 69 | 
70 70 |     np.lookfor
71 71 | 

error[NPY201]: NPY201.py:70:5: `np.lookfor` will be removed in NumPy 2.0. Search NumPy’s documentation directly.

   |
68 |     np.longfloat(12+34j)
69 | 
70 |     np.lookfor
   |     ^^^^^^^^^^
71 | 
72 |     np.obj2sctype(int)
   |
error[NPY201]: NPY201.py:72:5: `np.obj2sctype` will be removed without replacement in NumPy 2.0

   |
70 |     np.lookfor
71 | 
72 |     np.obj2sctype(int)
   |     ^^^^^^^^^^^^^
73 | 
74 |     np.PINF
   |
error[NPY201]: NPY201.py:74:5: [*] `np.PINF` will be removed in NumPy 2.0. Use `numpy.inf` instead.

   |
72 |     np.obj2sctype(int)
73 | 
74 |     np.PINF
   |     ^^^^^^^
75 | 
76 |     np.PZERO
   |
   = help: Replace with `numpy.inf`
ℹ Safe fix
71 71 | 
72 72 |     np.obj2sctype(int)
73 73 | 
74    |-    np.PINF
   74 |+    np.inf
75 75 | 
76 76 |     np.PZERO
77 77 | 

error[NPY201]: NPY201.py:76:5: [*] `np.PZERO` will be removed in NumPy 2.0. Use `0.0` instead.

   |
74 |     np.PINF
75 | 
76 |     np.PZERO
   |     ^^^^^^^^
77 | 
78 |     np.recfromcsv
   |
   = help: Replace with `0.0`
ℹ Safe fix
73 73 | 
74 74 |     np.PINF
75 75 | 
76    |-    np.PZERO
   76 |+    0.0
77 77 | 
78 78 |     np.recfromcsv
79 79 | 

error[NPY201]: NPY201.py:78:5: `np.recfromcsv` will be removed in NumPy 2.0. Use `np.genfromtxt` with comma delimiter instead.

   |
76 |     np.PZERO
77 | 
78 |     np.recfromcsv
   |     ^^^^^^^^^^^^^
79 | 
80 |     np.recfromtxt
   |
error[NPY201]: NPY201.py:80:5: `np.recfromtxt` will be removed in NumPy 2.0. Use `np.genfromtxt` instead.

   |
78 |     np.recfromcsv
79 | 
80 |     np.recfromtxt
   |     ^^^^^^^^^^^^^
81 | 
82 |     np.round_(12.34)
   |
error[NPY201]: NPY201.py:82:5: [*] `np.round_` will be removed in NumPy 2.0. Use `numpy.round` instead.

   |
80 |     np.recfromtxt
81 | 
82 |     np.round_(12.34)
   |     ^^^^^^^^^
83 | 
84 |     np.safe_eval
   |
   = help: Replace with `numpy.round`
ℹ Safe fix
79 79 | 
80 80 |     np.recfromtxt
81 81 | 
82    |-    np.round_(12.34)
   82 |+    np.round(12.34)
83 83 | 
84 84 |     np.safe_eval
85 85 | 

error[NPY201]: NPY201.py:84:5: [*] `np.safe_eval` will be removed in NumPy 2.0. Use `ast.literal_eval` instead.

   |
82 |     np.round_(12.34)
83 | 
84 |     np.safe_eval
   |     ^^^^^^^^^^^^
85 | 
86 |     np.sctype2char
   |
   = help: Replace with `ast.literal_eval`
ℹ Safe fix
   1  |+from ast import literal_eval
1  2  | def func():
2  3  |     import numpy as np
3  4  | 
--------------------------------------------------------------------------------
81 82 | 
82 83 |     np.round_(12.34)
83 84 | 
84    |-    np.safe_eval
   85 |+    literal_eval
85 86 | 
86 87 |     np.sctype2char
87 88 | 

error[NPY201]: NPY201.py:86:5: `np.sctype2char` will be removed without replacement in NumPy 2.0

   |
84 |     np.safe_eval
85 | 
86 |     np.sctype2char
   |     ^^^^^^^^^^^^^^
87 | 
88 |     np.sctypes
   |
error[NPY201]: NPY201.py:88:5: `np.sctypes` will be removed without replacement in NumPy 2.0

   |
86 |     np.sctype2char
87 | 
88 |     np.sctypes
   |     ^^^^^^^^^^
89 | 
90 |     np.seterrobj
   |
error[NPY201]: NPY201.py:90:5: `np.seterrobj` will be removed in NumPy 2.0. Use the `np.errstate` context manager instead.

   |
88 |     np.sctypes
89 | 
90 |     np.seterrobj
   |     ^^^^^^^^^^^^
91 | 
92 |     np.set_numeric_ops
   |
error[NPY201]: NPY201.py:94:5: `np.set_string_function` will be removed in NumPy 2.0. Use `np.set_printoptions` for custom printing of NumPy objects.

   |
92 |     np.set_numeric_ops
93 | 
94 |     np.set_string_function
   |     ^^^^^^^^^^^^^^^^^^^^^^
95 | 
96 |     np.singlecomplex(12+1j)
   |
error[NPY201]: NPY201.py:96:5: [*] `np.singlecomplex` will be removed in NumPy 2.0. Use `numpy.complex64` instead.

   |
94 |     np.set_string_function
95 | 
96 |     np.singlecomplex(12+1j)
   |     ^^^^^^^^^^^^^^^^
97 | 
98 |     np.string_("asdf")
   |
   = help: Replace with `numpy.complex64`
ℹ Safe fix
93 93 | 
94 94 |     np.set_string_function
95 95 | 
96    |-    np.singlecomplex(12+1j)
   96 |+    np.complex64(12+1j)
97 97 | 
98 98 |     np.string_("asdf")
99 99 | 

error[NPY201]: NPY201.py:98:5: [*] `np.string_` will be removed in NumPy 2.0. Use `numpy.bytes_` instead.

    |
 96 |     np.singlecomplex(12+1j)
 97 | 
 98 |     np.string_("asdf")
    |     ^^^^^^^^^^
 99 | 
100 |     np.source
    |
    = help: Replace with `numpy.bytes_`
ℹ Safe fix
95 95 | 
96 96 |     np.singlecomplex(12+1j)
97 97 | 
98    |-    np.string_("asdf")
   98 |+    np.bytes_("asdf")
99 99 | 
100 100 |     np.source
101 101 | 

error[NPY201]: NPY201.py:100:5: [*] `np.source` will be removed in NumPy 2.0. Use `inspect.getsource` instead.

    |
 98 |     np.string_("asdf")
 99 | 
100 |     np.source
    |     ^^^^^^^^^
101 | 
102 |     np.tracemalloc_domain
    |
    = help: Replace with `inspect.getsource`
ℹ Safe fix
    1   |+from inspect import getsource
1   2   | def func():
2   3   |     import numpy as np
3   4   | 
--------------------------------------------------------------------------------
97  98  | 
98  99  |     np.string_("asdf")
99  100 | 
100     |-    np.source
    101 |+    getsource
101 102 | 
102 103 |     np.tracemalloc_domain
103 104 | 

error[NPY201]: NPY201.py:102:5: [*] `np.tracemalloc_domain` will be removed in NumPy 2.0. Use `numpy.lib.tracemalloc_domain` instead.

    |
100 |     np.source
101 | 
102 |     np.tracemalloc_domain
    |     ^^^^^^^^^^^^^^^^^^^^^
103 | 
104 |     np.unicode_("asf")
    |
    = help: Replace with `numpy.lib.tracemalloc_domain`
ℹ Safe fix
    1   |+from numpy.lib import tracemalloc_domain
1   2   | def func():
2   3   |     import numpy as np
3   4   | 
--------------------------------------------------------------------------------
99  100 | 
100 101 |     np.source
101 102 | 
102     |-    np.tracemalloc_domain
    103 |+    tracemalloc_domain
103 104 | 
104 105 |     np.unicode_("asf")
105 106 | 

error[NPY201]: NPY201.py:104:5: [*] `np.unicode_` will be removed in NumPy 2.0. Use `numpy.str_` instead.

    |
102 |     np.tracemalloc_domain
103 | 
104 |     np.unicode_("asf")
    |     ^^^^^^^^^^^
105 | 
106 |     np.who()
    |
    = help: Replace with `numpy.str_`
ℹ Safe fix
101 101 | 
102 102 |     np.tracemalloc_domain
103 103 | 
104     |-    np.unicode_("asf")
    104 |+    np.str_("asf")
105 105 | 
106 106 |     np.who()
107 107 | 

error[NPY201]: NPY201.py:106:5: `np.who` will be removed in NumPy 2.0. Use an IDE variable explorer or `locals()` instead.

    |
104 |     np.unicode_("asf")
105 | 
106 |     np.who()
    |     ^^^^^^
107 | 
108 |     np.row_stack(([1,2], [3,4]))
    |
error[NPY201]: NPY201.py:108:5: [*] `np.row_stack` will be removed in NumPy 2.0. Use `numpy.vstack` instead.

    |
106 |     np.who()
107 | 
108 |     np.row_stack(([1,2], [3,4]))
    |     ^^^^^^^^^^^^
109 | 
110 |     np.alltrue([True, True])
    |
    = help: Replace with `numpy.vstack`
ℹ Safe fix
105 105 | 
106 106 |     np.who()
107 107 | 
108     |-    np.row_stack(([1,2], [3,4]))
    108 |+    np.vstack(([1,2], [3,4]))
109 109 | 
110 110 |     np.alltrue([True, True])
111 111 | 

error[NPY201]: NPY201.py:110:5: [*] `np.alltrue` will be removed in NumPy 2.0. Use `all` instead.

    |
108 |     np.row_stack(([1,2], [3,4]))
109 | 
110 |     np.alltrue([True, True])
    |     ^^^^^^^^^^
111 | 
112 |     np.anytrue([True, False])
    |
    = help: Replace with `all`
ℹ Safe fix
107 107 | 
108 108 |     np.row_stack(([1,2], [3,4]))
109 109 | 
110     |-    np.alltrue([True, True])
    110 |+    all([True, True])
111 111 | 
112 112 |     np.anytrue([True, False])
113 113 | 

error[NPY201]: NPY201.py:114:5: [*] `np.cumproduct` will be removed in NumPy 2.0. Use `numpy.cumprod` instead.

    |
112 |     np.anytrue([True, False])
113 | 
114 |     np.cumproduct([1, 2, 3])
    |     ^^^^^^^^^^^^^
115 | 
116 |     np.product([1, 2, 3])
    |
    = help: Replace with `numpy.cumprod`
ℹ Safe fix
111 111 | 
112 112 |     np.anytrue([True, False])
113 113 | 
114     |-    np.cumproduct([1, 2, 3])
    114 |+    np.cumprod([1, 2, 3])
115 115 | 
116 116 |     np.product([1, 2, 3])

error[NPY201]: NPY201.py:116:5: [*] `np.product` will be removed in NumPy 2.0. Use `numpy.prod` instead.

    |
114 |     np.cumproduct([1, 2, 3])
115 | 
116 |     np.product([1, 2, 3])
    |     ^^^^^^^^^^
    |
    = help: Replace with `numpy.prod`
ℹ Safe fix
113 113 | 
114 114 |     np.cumproduct([1, 2, 3])
115 115 | 
116     |-    np.product([1, 2, 3])
    116 |+    np.prod([1, 2, 3])
