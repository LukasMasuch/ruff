---
source: crates/ruff_linter/src/rules/flake8_use_pathlib/mod.rs
---
error[PTH100]: import_as.py:7:5: `os.path.abspath()` should be replaced by `Path.resolve()`

  |
5 | q = "bar"
6 | 
7 | a = foo_p.abspath(p)
  |     ^^^^^^^^^^^^^
8 | aa = foo.chmod(p)
9 | aaa = foo.mkdir(p)
  |
error[PTH101]: import_as.py:8:6: `os.chmod()` should be replaced by `Path.chmod()`

   |
 7 | a = foo_p.abspath(p)
 8 | aa = foo.chmod(p)
   |      ^^^^^^^^^
 9 | aaa = foo.mkdir(p)
10 | foo.makedirs(p)
   |
error[PTH102]: import_as.py:9:7: `os.mkdir()` should be replaced by `Path.mkdir()`

   |
 7 | a = foo_p.abspath(p)
 8 | aa = foo.chmod(p)
 9 | aaa = foo.mkdir(p)
   |       ^^^^^^^^^
10 | foo.makedirs(p)
11 | foo.rename(p)
   |
error[PTH103]: import_as.py:10:1: `os.makedirs()` should be replaced by `Path.mkdir(parents=True)`

   |
 8 | aa = foo.chmod(p)
 9 | aaa = foo.mkdir(p)
10 | foo.makedirs(p)
   | ^^^^^^^^^^^^
11 | foo.rename(p)
12 | foo.replace(p)
   |
error[PTH104]: import_as.py:11:1: `os.rename()` should be replaced by `Path.rename()`

   |
 9 | aaa = foo.mkdir(p)
10 | foo.makedirs(p)
11 | foo.rename(p)
   | ^^^^^^^^^^
12 | foo.replace(p)
13 | foo.rmdir(p)
   |
error[PTH105]: import_as.py:12:1: `os.replace()` should be replaced by `Path.replace()`

   |
10 | foo.makedirs(p)
11 | foo.rename(p)
12 | foo.replace(p)
   | ^^^^^^^^^^^
13 | foo.rmdir(p)
14 | foo.remove(p)
   |
error[PTH106]: import_as.py:13:1: `os.rmdir()` should be replaced by `Path.rmdir()`

   |
11 | foo.rename(p)
12 | foo.replace(p)
13 | foo.rmdir(p)
   | ^^^^^^^^^
14 | foo.remove(p)
15 | foo.unlink(p)
   |
error[PTH107]: import_as.py:14:1: `os.remove()` should be replaced by `Path.unlink()`

   |
12 | foo.replace(p)
13 | foo.rmdir(p)
14 | foo.remove(p)
   | ^^^^^^^^^^
15 | foo.unlink(p)
16 | foo.getcwd(p)
   |
error[PTH108]: import_as.py:15:1: `os.unlink()` should be replaced by `Path.unlink()`

   |
13 | foo.rmdir(p)
14 | foo.remove(p)
15 | foo.unlink(p)
   | ^^^^^^^^^^
16 | foo.getcwd(p)
17 | b = foo_p.exists(p)
   |
error[PTH109]: import_as.py:16:1: `os.getcwd()` should be replaced by `Path.cwd()`

   |
14 | foo.remove(p)
15 | foo.unlink(p)
16 | foo.getcwd(p)
   | ^^^^^^^^^^
17 | b = foo_p.exists(p)
18 | bb = foo_p.expanduser(p)
   |
error[PTH110]: import_as.py:17:5: `os.path.exists()` should be replaced by `Path.exists()`

   |
15 | foo.unlink(p)
16 | foo.getcwd(p)
17 | b = foo_p.exists(p)
   |     ^^^^^^^^^^^^
18 | bb = foo_p.expanduser(p)
19 | bbb = foo_p.isdir(p)
   |
error[PTH111]: import_as.py:18:6: `os.path.expanduser()` should be replaced by `Path.expanduser()`

   |
16 | foo.getcwd(p)
17 | b = foo_p.exists(p)
18 | bb = foo_p.expanduser(p)
   |      ^^^^^^^^^^^^^^^^
19 | bbb = foo_p.isdir(p)
20 | bbbb = foo_p.isfile(p)
   |
error[PTH112]: import_as.py:19:7: `os.path.isdir()` should be replaced by `Path.is_dir()`

   |
17 | b = foo_p.exists(p)
18 | bb = foo_p.expanduser(p)
19 | bbb = foo_p.isdir(p)
   |       ^^^^^^^^^^^
20 | bbbb = foo_p.isfile(p)
21 | bbbbb = foo_p.islink(p)
   |
error[PTH113]: import_as.py:20:8: `os.path.isfile()` should be replaced by `Path.is_file()`

   |
18 | bb = foo_p.expanduser(p)
19 | bbb = foo_p.isdir(p)
20 | bbbb = foo_p.isfile(p)
   |        ^^^^^^^^^^^^
21 | bbbbb = foo_p.islink(p)
22 | foo.readlink(p)
   |
error[PTH114]: import_as.py:21:9: `os.path.islink()` should be replaced by `Path.is_symlink()`

   |
19 | bbb = foo_p.isdir(p)
20 | bbbb = foo_p.isfile(p)
21 | bbbbb = foo_p.islink(p)
   |         ^^^^^^^^^^^^
22 | foo.readlink(p)
23 | foo.stat(p)
   |
error[PTH115]: import_as.py:22:1: `os.readlink()` should be replaced by `Path.readlink()`

   |
20 | bbbb = foo_p.isfile(p)
21 | bbbbb = foo_p.islink(p)
22 | foo.readlink(p)
   | ^^^^^^^^^^^^
23 | foo.stat(p)
24 | foo_p.isabs(p)
   |
error[PTH116]: import_as.py:23:1: `os.stat()` should be replaced by `Path.stat()`, `Path.owner()`, or `Path.group()`

   |
21 | bbbbb = foo_p.islink(p)
22 | foo.readlink(p)
23 | foo.stat(p)
   | ^^^^^^^^
24 | foo_p.isabs(p)
25 | foo_p.join(p, q)
   |
error[PTH117]: import_as.py:24:1: `os.path.isabs()` should be replaced by `Path.is_absolute()`

   |
22 | foo.readlink(p)
23 | foo.stat(p)
24 | foo_p.isabs(p)
   | ^^^^^^^^^^^
25 | foo_p.join(p, q)
26 | foo.sep.join([p, q])
   |
error[PTH118]: import_as.py:25:1: `os.path.join()` should be replaced by `Path` with `/` operator

   |
23 | foo.stat(p)
24 | foo_p.isabs(p)
25 | foo_p.join(p, q)
   | ^^^^^^^^^^
26 | foo.sep.join([p, q])
27 | foo.sep.join((p, q))
   |
error[PTH118]: import_as.py:26:1: `os.sep.join()` should be replaced by `Path` with `/` operator

   |
24 | foo_p.isabs(p)
25 | foo_p.join(p, q)
26 | foo.sep.join([p, q])
   | ^^^^^^^^^^^^
27 | foo.sep.join((p, q))
28 | foo_p.basename(p)
   |
error[PTH118]: import_as.py:27:1: `os.sep.join()` should be replaced by `Path` with `/` operator

   |
25 | foo_p.join(p, q)
26 | foo.sep.join([p, q])
27 | foo.sep.join((p, q))
   | ^^^^^^^^^^^^
28 | foo_p.basename(p)
29 | foo_p.dirname(p)
   |
error[PTH119]: import_as.py:28:1: `os.path.basename()` should be replaced by `Path.name`

   |
26 | foo.sep.join([p, q])
27 | foo.sep.join((p, q))
28 | foo_p.basename(p)
   | ^^^^^^^^^^^^^^
29 | foo_p.dirname(p)
30 | foo_p.samefile(p)
   |
error[PTH120]: import_as.py:29:1: `os.path.dirname()` should be replaced by `Path.parent`

   |
27 | foo.sep.join((p, q))
28 | foo_p.basename(p)
29 | foo_p.dirname(p)
   | ^^^^^^^^^^^^^
30 | foo_p.samefile(p)
31 | foo_p.splitext(p)
   |
error[PTH121]: import_as.py:30:1: `os.path.samefile()` should be replaced by `Path.samefile()`

   |
28 | foo_p.basename(p)
29 | foo_p.dirname(p)
30 | foo_p.samefile(p)
   | ^^^^^^^^^^^^^^
31 | foo_p.splitext(p)
   |
error[PTH122]: import_as.py:31:1: `os.path.splitext()` should be replaced by `Path.suffix`, `Path.stem`, and `Path.parent`

   |
29 | foo_p.dirname(p)
30 | foo_p.samefile(p)
31 | foo_p.splitext(p)
   | ^^^^^^^^^^^^^^
   |
