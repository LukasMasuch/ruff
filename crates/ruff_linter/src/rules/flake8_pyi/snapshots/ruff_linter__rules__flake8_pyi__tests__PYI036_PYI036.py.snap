---
source: crates/ruff_linter/src/rules/flake8_pyi/mod.rs
---
error[PYI036]: PYI036.py:54:31: [*] Star-args in `__exit__` should be annotated with `object`

   |
53 | class BadOne:
54 |     def __exit__(self, *args: Any) -> None: ... # PYI036: Bad star-args annotation
   |                               ^^^
55 |     async def __aexit__(self) -> None: ... # PYI036: Missing args
   |
   = help: Annotate star-args with `object`
ℹ Safe fix
51 51 | 
52 52 | 
53 53 | class BadOne:
54    |-    def __exit__(self, *args: Any) -> None: ... # PYI036: Bad star-args annotation
   54 |+    def __exit__(self, *args: object) -> None: ... # PYI036: Bad star-args annotation
55 55 |     async def __aexit__(self) -> None: ... # PYI036: Missing args
56 56 | 
57 57 | class BadTwo:

error[PYI036]: PYI036.py:55:24: If there are no star-args, `__aexit__` should have at least 3 non-keyword-only args (excluding `self`)

   |
53 | class BadOne:
54 |     def __exit__(self, *args: Any) -> None: ... # PYI036: Bad star-args annotation
55 |     async def __aexit__(self) -> None: ... # PYI036: Missing args
   |                        ^^^^^^
56 | 
57 | class BadTwo:
   |
error[PYI036]: PYI036.py:58:38: All arguments after the first four in `__exit__` must have a default value

   |
57 | class BadTwo:
58 |     def __exit__(self, typ, exc, tb, weird_extra_arg) -> None: ... # PYI036: Extra arg must have default
   |                                      ^^^^^^^^^^^^^^^
59 |     async def __aexit__(self, typ, exc, tb, *, weird_extra_arg) -> None: ...# PYI036: Extra arg must have default
   |
error[PYI036]: PYI036.py:59:48: All keyword-only arguments in `__aexit__` must have a default value

   |
57 | class BadTwo:
58 |     def __exit__(self, typ, exc, tb, weird_extra_arg) -> None: ... # PYI036: Extra arg must have default
59 |     async def __aexit__(self, typ, exc, tb, *, weird_extra_arg) -> None: ...# PYI036: Extra arg must have default
   |                                                ^^^^^^^^^^^^^^^
60 | 
61 | class BadThree:
   |
error[PYI036]: PYI036.py:62:29: The first argument in `__exit__` should be annotated with `object` or `type[BaseException] | None`

   |
61 | class BadThree:
62 |     def __exit__(self, typ: type[BaseException], exc: BaseException | None, tb: TracebackType | None) -> None: ... # PYI036: First a...
   |                             ^^^^^^^^^^^^^^^^^^^
63 |     async def __aexit__(self, __typ: type[BaseException] | None, __exc: BaseException, __tb: TracebackType) -> bool | None: ... # PY...
   |
error[PYI036]: PYI036.py:63:73: The second argument in `__aexit__` should be annotated with `object` or `BaseException | None`

   |
61 | class BadThree:
62 |     def __exit__(self, typ: type[BaseException], exc: BaseException | None, tb: TracebackType | None) -> None: ... # PYI036: First a...
63 |     async def __aexit__(self, __typ: type[BaseException] | None, __exc: BaseException, __tb: TracebackType) -> bool | None: ... # PY...
   |                                                                         ^^^^^^^^^^^^^
64 | 
65 | class BadFour:
   |
error[PYI036]: PYI036.py:63:94: The third argument in `__aexit__` should be annotated with `object` or `types.TracebackType | None`

   |
61 | class BadThree:
62 |     def __exit__(self, typ: type[BaseException], exc: BaseException | None, tb: TracebackType | None) -> None: ... # PYI036: First a...
63 |     async def __aexit__(self, __typ: type[BaseException] | None, __exc: BaseException, __tb: TracebackType) -> bool | None: ... # PY...
   |                                                                                              ^^^^^^^^^^^^^
64 | 
65 | class BadFour:
   |
error[PYI036]: PYI036.py:66:111: The third argument in `__exit__` should be annotated with `object` or `types.TracebackType | None`

   |
65 | class BadFour:
66 |     def __exit__(self, typ: typing.Optional[type[BaseException]], exc: typing.Union[BaseException, None], tb: TracebackType) -> None...
   |                                                                                                               ^^^^^^^^^^^^^
67 |     async def __aexit__(self, __typ: type[BaseException] | None, __exc: BaseException | None, __tb: typing.Union[TracebackType, None...
   |
error[PYI036]: PYI036.py:67:101: The third argument in `__aexit__` should be annotated with `object` or `types.TracebackType | None`

   |
65 | ...
66 | ...ception]], exc: typing.Union[BaseException, None], tb: TracebackType) -> None: ... # PYI036: Third arg has bad annotation
67 | ...] | None, __exc: BaseException | None, __tb: typing.Union[TracebackType, None, int]) -> bool | None: ... # PYI036: Third arg has ...
   |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
68 | ...
69 | ...
   |
error[PYI036]: PYI036.py:70:29: The first argument in `__exit__` should be annotated with `object` or `type[BaseException] | None`

   |
69 | class BadFive:
70 |     def __exit__(self, typ: BaseException | None, *args: list[str]) -> bool: ... # PYI036: Bad star-args annotation
   |                             ^^^^^^^^^^^^^^^^^^^^
71 |     async def __aexit__(self, /, typ: type[BaseException] | None, *args: Any) -> Awaitable[None]: ... # PYI036: Bad star-args annota...
   |
error[PYI036]: PYI036.py:70:58: [*] Star-args in `__exit__` should be annotated with `object`

   |
69 | class BadFive:
70 |     def __exit__(self, typ: BaseException | None, *args: list[str]) -> bool: ... # PYI036: Bad star-args annotation
   |                                                          ^^^^^^^^^
71 |     async def __aexit__(self, /, typ: type[BaseException] | None, *args: Any) -> Awaitable[None]: ... # PYI036: Bad star-args annota...
   |
   = help: Annotate star-args with `object`
ℹ Safe fix
67 67 |     async def __aexit__(self, __typ: type[BaseException] | None, __exc: BaseException | None, __tb: typing.Union[TracebackType, None, int]) -> bool | None: ... # PYI036: Third arg has bad annotation
68 68 | 
69 69 | class BadFive:
70    |-    def __exit__(self, typ: BaseException | None, *args: list[str]) -> bool: ... # PYI036: Bad star-args annotation
   70 |+    def __exit__(self, typ: BaseException | None, *args: object) -> bool: ... # PYI036: Bad star-args annotation
71 71 |     async def __aexit__(self, /, typ: type[BaseException] | None, *args: Any) -> Awaitable[None]: ... # PYI036: Bad star-args annotation
72 72 | 
73 73 | class BadSix:

error[PYI036]: PYI036.py:71:74: [*] Star-args in `__aexit__` should be annotated with `object`

   |
69 | class BadFive:
70 |     def __exit__(self, typ: BaseException | None, *args: list[str]) -> bool: ... # PYI036: Bad star-args annotation
71 |     async def __aexit__(self, /, typ: type[BaseException] | None, *args: Any) -> Awaitable[None]: ... # PYI036: Bad star-args annota...
   |                                                                          ^^^
72 | 
73 | class BadSix:
   |
   = help: Annotate star-args with `object`
ℹ Safe fix
68 68 | 
69 69 | class BadFive:
70 70 |     def __exit__(self, typ: BaseException | None, *args: list[str]) -> bool: ... # PYI036: Bad star-args annotation
71    |-    async def __aexit__(self, /, typ: type[BaseException] | None, *args: Any) -> Awaitable[None]: ... # PYI036: Bad star-args annotation
   71 |+    async def __aexit__(self, /, typ: type[BaseException] | None, *args: object) -> Awaitable[None]: ... # PYI036: Bad star-args annotation
72 72 | 
73 73 | class BadSix:
74 74 |     def __exit__(self, typ, exc, tb, weird_extra_arg, extra_arg2 = None) -> None: ... # PYI036: Extra arg must have default

error[PYI036]: PYI036.py:74:38: All arguments after the first four in `__exit__` must have a default value

   |
73 | class BadSix:
74 |     def __exit__(self, typ, exc, tb, weird_extra_arg, extra_arg2 = None) -> None: ... # PYI036: Extra arg must have default
   |                                      ^^^^^^^^^^^^^^^
75 |     async def __aexit__(self, typ, exc, tb, *, weird_extra_arg) -> None: ... # PYI036: kwargs must have default
   |
error[PYI036]: PYI036.py:75:48: All keyword-only arguments in `__aexit__` must have a default value

   |
73 | class BadSix:
74 |     def __exit__(self, typ, exc, tb, weird_extra_arg, extra_arg2 = None) -> None: ... # PYI036: Extra arg must have default
75 |     async def __aexit__(self, typ, exc, tb, *, weird_extra_arg) -> None: ... # PYI036: kwargs must have default
   |                                                ^^^^^^^^^^^^^^^
76 | 
77 | class AllPositionalOnlyArgs:
   |
error[PYI036]: PYI036.py:82:29: The first argument in `__exit__` should be annotated with `object` or `type[BaseException] | None`

   |
81 | class BadAllPositionalOnlyArgs:
82 |     def __exit__(self, typ: type[Exception] | None, exc: BaseException | None, tb: TracebackType | None, /) -> None: ...
   |                             ^^^^^^^^^^^^^^^^^^^^^^
83 |     async def __aexit__(self, typ: type[BaseException] | None, exc: BaseException | None, tb: TracebackType, /) -> None: ...
   |
error[PYI036]: PYI036.py:83:95: The third argument in `__aexit__` should be annotated with `object` or `types.TracebackType | None`

   |
81 | class BadAllPositionalOnlyArgs:
82 |     def __exit__(self, typ: type[Exception] | None, exc: BaseException | None, tb: TracebackType | None, /) -> None: ...
83 |     async def __aexit__(self, typ: type[BaseException] | None, exc: BaseException | None, tb: TracebackType, /) -> None: ...
   |                                                                                               ^^^^^^^^^^^^^
84 | 
85 | # Definitions not in a class scope can do whatever, we don't care
   |
error[PYI036]: PYI036.py:161:17: Annotations for a three-argument `__exit__` overload (excluding `self`) should either be `None, None, None` or `type[BaseException], BaseException, types.TracebackType`

    |
159 |     def __exit__(self, exc_typ: None, exc: None, tb: None) -> None: ...  # Okay
160 |     @overload
161 |     def __exit__(self, exc_typ: Exception, exc: Exception, tb: TracebackType) -> None: ...  # PYI036
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
162 |     def __exit__(self, exc_typ: type[BaseException] | None, exc: BaseException | None, tb: TracebackType | None) -> None: ...
    |
error[PYI036]: PYI036.py:166:17: Annotations for a three-argument `__exit__` overload (excluding `self`) should either be `None, None, None` or `type[BaseException], BaseException, types.TracebackType`

    |
164 | class UnacceptableOverload2:
165 |     @overload
166 |     def __exit__(self, exc_typ: type[BaseException] | None, exc: None, tb: None) -> None: ...  # PYI036
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
167 |     @overload
168 |     def __exit__(self, exc_typ: object, exc: Exception, tb: builtins.TracebackType) -> None: ...  # PYI036
    |
error[PYI036]: PYI036.py:168:17: Annotations for a three-argument `__exit__` overload (excluding `self`) should either be `None, None, None` or `type[BaseException], BaseException, types.TracebackType`

    |
166 |     def __exit__(self, exc_typ: type[BaseException] | None, exc: None, tb: None) -> None: ...  # PYI036
167 |     @overload
168 |     def __exit__(self, exc_typ: object, exc: Exception, tb: builtins.TracebackType) -> None: ...  # PYI036
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
169 |     def __exit__(self, exc_typ: type[BaseException] | None, exc: BaseException | None, tb: TracebackType | None) -> None: ...
    |
